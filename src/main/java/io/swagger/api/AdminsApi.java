/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RestError;
import io.swagger.model.User;
import io.swagger.annotations.*;
import java.security.Principal;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-07T10:08:47.568Z[GMT]")
@Api(value = "admins", description = "the admins API")
public interface AdminsApi {

    @ApiOperation(value = "Returns all admins.", nickname = "adminsGet", notes = "Endpoint where all admins can be obtained.", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of JSON representations of the admins", response = User.class, responseContainer = "List") })
    @RequestMapping(value = "/admins",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> adminsGet(@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
,@ApiParam(value = "The firstname of the admins to return.") @Valid @RequestParam(value = "firstname", required = false) String firstname
,@ApiParam(value = "The lastname of the admins to return.") @Valid @RequestParam(value = "lastname", required = false) String lastname
,@ApiParam(value = "The email of the admins to return.") @Valid @RequestParam(value = "email", required = false) String emai
);


    @ApiOperation(value = "Deletes an admin by ID.", nickname = "adminsIdDelete", notes = "Endpoint where an admin can be deleted by specifying its ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empty response"),
        @ApiResponse(code = 404, message = "Could not find the user requested", response = RestError.class) })
    @RequestMapping(value = "/admins/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> adminsIdDelete(@ApiParam(value = "The ID of the admin to delete.",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);


    @ApiOperation(value = "Returns an admin by ID.", nickname = "adminsIdGet", notes = "Endpoint where an admin can be obtained by specifying its ID.", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the admin", response = User.class),
        @ApiResponse(code = 404, message = "Could not find the user requested", response = RestError.class) })
    @RequestMapping(value = "/admins/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> adminsIdGet(@ApiParam(value = "The ID of the admin to return.",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);


    @ApiOperation(value = "Updates an admin by ID.", nickname = "adminsIdPut", notes = "Endpoint where an admin can be updated by specifying its ID.", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the updated admin", response = User.class),
        @ApiResponse(code = 404, message = "Could not find the user requested", response = RestError.class) })
    @RequestMapping(value = "/admins/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> adminsIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
,@ApiParam(value = "The ID of the admin to update.",required=true) @PathVariable("id") Integer id
);


    @ApiOperation(value = "Creates an admin.", nickname = "adminsPost", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = User.class) })
    @RequestMapping(value = "/admins",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> adminsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);

}
