/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.model.RestError;
import io.swagger.annotations.*;
import io.swagger.model.FoodOrder;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-07T10:08:47.568Z[GMT]")
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    @ApiOperation(value = "Returns all orders.", nickname = "ordersGet", notes = "Endpoint where all orders can be obtained.", response = Order.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of JSON representations of the orders", response = Order.class, responseContainer = "List") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> ordersGet(@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
,@ApiParam(value = "The email of the customer whose orders will be returned.") @Valid @RequestParam(value = "email", required = false) String email
,@ApiParam(value = "The status of the orders to return.") @Valid @RequestParam(value = "status", required = false) String status
,@ApiParam(value = "The name of the food to filter by.") @Valid @RequestParam(value = "foodName", required = false) String foodName
,@ApiParam(value = "The name of the client to filter by.") @Valid @RequestParam(value = "clientName", required = false) String clientName
,@ApiParam(value = "The last name of the client to filter by.") @Valid @RequestParam(value = "clientLastName", required = false) String clientLastName
);


    @ApiOperation(value = "Deletes an order by ID.", nickname = "ordersIdDelete", notes = "Endpoint where an order can be deleted by specifying its ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empty response"),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> ordersIdDelete(@ApiParam(value = "The ID of the order to delete.",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);


    @ApiOperation(value = "Returns an order by ID.", nickname = "ordersIdGet", notes = "Endpoint where an order can be obtained by specifying its ID.", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the order", response = Order.class),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> ordersIdGet(@ApiParam(value = "The ID of the order to return.",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);


    @ApiOperation(value = "Updates an order by ID.", nickname = "ordersIdPut", notes = "Endpoint where an order can be updated by specifying its ID.", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the updated order", response = Order.class),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Order> ordersIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
,@ApiParam(value = "The ID of the order to update.",required=true) @PathVariable("id") Integer id
);


    @ApiOperation(value = "Creates an order.", nickname = "ordersPost", notes = "", response = Order.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Order.class) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Order> ordersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Order body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = true) @Valid @RequestParam(value = "access_token", required = true) String accessToken
);
    
    @ApiOperation(value = "Returns a link between an order and a food by ID.", nickname = "ordersIdGet", notes = "Endpoint where a link between an order and a food can be obtained by specifying its ID.", response = FoodOrder.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the link", response = FoodOrder.class),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/foodOrders/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FoodOrder> foodOrdersIdGet(@ApiParam(value = "The ID of the FoodOrder to return.",required=true) @PathVariable("id") Integer id
);
    
    @ApiOperation(value = "Creates a link between an order and a food.", nickname = "foodOrdersPost", notes = "", response = FoodOrder.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Order.class) })
    @RequestMapping(value = "/foodOrders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FoodOrder> foodOrdersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FoodOrder body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = false) @Valid @RequestParam(value = "access_token", required = false) String accessToken
);
    
    @ApiOperation(value = "Updates a link between an order and a food by ID.", nickname = "foodOrdersIdPut", notes = "Endpoint where a link between an order and a food can be updated by specifying its ID.", response = FoodOrder.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON representation of the updated order", response = FoodOrder.class),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/foodOrders/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<FoodOrder> foodOrdersIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FoodOrder body
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = false) @Valid @RequestParam(value = "access_token", required = false) String accessToken,
@ApiParam(value = "The ID of the foodOrder to update.",required=true) @PathVariable("id") Integer id
);
    
    @ApiOperation(value = "Deletes a link between an order and a food by ID.", nickname = "foodOrdersIdDelete", notes = "Endpoint where a link between an order and a food can be deleted by specifying its ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empty response"),
        @ApiResponse(code = 404, message = "Could not find the order requested", response = RestError.class) })
    @RequestMapping(value = "/foodOrders/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> foodOrdersIdDelete(@ApiParam(value = "The ID of the order to delete.",required=true) @PathVariable("id") Integer id
,@NotNull @ApiParam(value = "The access token given to the authenticated user.", required = false) @Valid @RequestParam(value = "access_token", required = false) String accessToken
);

}
